function aggregateValuesToString(input) { 
    let result = ""; 
    for (const key in input) { 
        if (input.hasOwnProperty(key)) { 
            result += input[key];
        }
    }  
    return result;
}

const t =  {
    "0": " ",
    "1": "{",
    "2": "\n",
    "3": " ",
    "4": " ",
    "5": "f",
    "6": "i",
    "7": "x",
    "8": "e",
    "9": "d",
    "10": "H",
    "11": "t",
    "12": "m",
    "13": "l",
    "14": ":",
    "15": " ",
    "16": "<",
    "17": "a",
    "18": " ",
    "19": "c",
    "20": "l",
    "21": "a",
    "22": "s",
    "23": "s",
    "24": "=",
    "25": "\\",
    "26": "b",
    "27": "a",
    "28": "c",
    "29": "k",
    "30": "-",
    "31": "t",
    "32": "o",
    "33": "-",
    "34": "t",
    "35": "o",
    "36": "p",
    "37": " ",
    "38": "j",
    "39": "s",
    "40": "-",
    "41": "b",
    "42": "a",
    "43": "c",
    "44": "k",
    "45": "-",
    "46": "t",
    "47": "o",
    "48": "-",
    "49": "t",
    "50": "o",
    "51": "p",
    "52": "\\",
    "53": " ",
    "54": "a",
    "55": "r",
    "56": "i",
    "57": "a",
    "58": "-",
    "59": "l",
    "60": "a",
    "61": "b",
    "62": "e",
    "63": "l",
    "64": "=",
    "65": "\\",
    "66": "B",
    "67": "a",
    "68": "c",
    "69": "k",
    "70": " ",
    "71": "t",
    "72": "o",
    "73": " ",
    "74": "t",
    "75": "o",
    "76": "p",
    "77": "\\",
    "78": ">",
    "79": "\n",
    "80": " ",
    "81": " ",
    "82": " ",
    "83": " ",
    "84": " ",
    "85": " ",
    "86": " ",
    "87": " ",
    "88": " ",
    "89": " ",
    "90": " ",
    "91": " ",
    "92": " ",
    "93": " ",
    "94": " ",
    "95": " ",
    "96": "<",
    "97": "s",
    "98": "v",
    "99": "g",
    "100": ">",
    "101": "<",
    "102": "u",
    "103": "s",
    "104": "e",
    "105": " ",
    "106": "x",
    "107": "l",
    "108": "i",
    "109": "n",
    "110": "k",
    "111": ":",
    "112": "h",
    "113": "r",
    "114": "e",
    "115": "f",
    "116": "=",
    "117": "\\",
    "118": "#",
    "119": "c",
    "120": "o",
    "121": "p",
    "122": "y",
    "123": "r",
    "124": "i",
    "125": "g",
    "126": "h",
    "127": "t",
    "128": "\\",
    "129": ">",
    "130": "<",
    "131": "/",
    "132": "u",
    "133": "s",
    "134": "e",
    "135": ">",
    "136": "<",
    "137": "/",
    "138": "s",
    "139": "v",
    "140": "g",
    "141": ">",
    "142": "\n",
    "143": " ",
    "144": " ",
    "145": " ",
    "146": " ",
    "147": " ",
    "148": " ",
    "149": " ",
    "150": " ",
    "151": " ",
    "152": " ",
    "153": " ",
    "154": " ",
    "155": " ",
    "156": " ",
    "157": " ",
    "158": " ",
    "159": "<",
    "160": "s",
    "161": "p",
    "162": "a",
    "163": "n",
    "164": " ",
    "165": "c",
    "166": "l",
    "167": "a",
    "168": "s",
    "169": "s",
    "170": "=",
    "171": "\\",
    "172": "s",
    "173": "c",
    "174": "r",
    "175": "e",
    "176": "e",
    "177": "n",
    "178": "-",
    "179": "r",
    "180": "e",
    "181": "a",
    "182": "d",
    "183": "e",
    "184": "r",
    "185": "-",
    "186": "t",
    "187": "e",
    "188": "x",
    "189": "t",
    "190": "\\",
    "191": ">",
    "192": "B",
    "193": "a",
    "194": "c",
    "195": "k",
    "196": " ",
    "197": "t",
    "198": "o",
    "199": " ",
    "200": "t",
    "201": "o",
    "202": "p",
    "203": "<",
    "204": "/",
    "205": "s",
    "206": "p",
    "207": "a",
    "208": "n",
    "209": ">",
    "210": "\n",
    "211": " ",
    "212": " ",
    "213": " ",
    "214": " ",
    "215": " ",
    "216": " ",
    "217": " ",
    "218": " ",
    "219": " ",
    "220": " ",
    "221": " ",
    "222": " ",
    "223": "<",
    "224": "/",
    "225": "a",
    "226": ">",
    "227": ",",
    "228": "\n",
    "229": " ",
    "230": " ",
    "231": "r",
    "232": "e",
    "233": "p",
    "234": "o",
    "235": "r",
    "236": "t",
    "237": ":",
    "238": " ",
    "239": "A",
    "240": "d",
    "241": "d",
    "242": "e",
    "243": "d",
    "244": " ",
    "245": "'",
    "246": "a",
    "247": "r",
    "248": "i",
    "249": "a",
    "250": "-",
    "251": "l",
    "252": "a",
    "253": "b",
    "254": "e",
    "255": "l",
    "256": "'",
    "257": " ",
    "258": "a",
    "259": "t",
    "260": "t",
    "261": "r",
    "262": "i",
    "263": "b",
    "264": "u",
    "265": "t",
    "266": "e",
    "267": " ",
    "268": "a",
    "269": "n",
    "270": "d",
    "271": " ",
    "272": "'",
    "273": "s",
    "274": "c",
    "275": "r",
    "276": "e",
    "277": "e",
    "278": "n",
    "279": "-",
    "280": "r",
    "281": "e",
    "282": "a",
    "283": "d",
    "284": "e",
    "285": "r",
    "286": "-",
    "287": "t",
    "288": "e",
    "289": "x",
    "290": "t",
    "291": "'",
    "292": " ",
    "293": "c",
    "294": "l",
    "295": "a",
    "296": "s",
    "297": "s",
    "298": " ",
    "299": "t",
    "300": "o",
    "301": " ",
    "302": "i",
    "303": "m",
    "304": "p",
    "305": "r",
    "306": "o",
    "307": "v",
    "308": "e",
    "309": " ",
    "310": "a",
    "311": "c",
    "312": "c",
    "313": "e",
    "314": "s",
    "315": "s",
    "316": "i",
    "317": "b",
    "318": "i",
    "319": "l",
    "320": "i",
    "321": "t",
    "322": "y",
    "323": ".",
    "324": "\n",
    "325": "}" }

let r = aggregateValuesToString(t);

r = r.replaceAll('\n', '');
//console.log(JSON.parse(r));
console.log(r);


const y = "{
    "fixedHtml": "<svg><use id="Path" fill="#4E4B48" xlink:href="path-1.svg"></use></svg>",
    "report": "Fixed duplicate 'id' attribute by renaming the element to 'Path'. New HTML: <svg><use id=\"Path\" fill=\"#4E4B48\" xlink:href=\"path-1.svg\"></use></svg>."
  }"

const { jsonrepair } = require('jsonrepair');
console.log(jsonrepair(r));


function fixInnerQuotes(text) {
    
}